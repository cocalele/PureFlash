
> this documentation describe build and run PureFlash for developer.
> for production deployment, please refer deploy.md

## The simplest way is to build everything into a container:
```
 # git clone https://github.com/cocalele/PureFlash.git
 # cd PureFlash/docker/
 # podman build --no-cache -f Dockerfile -t pureflash/pureflash:selfbuild
```
Then you can follow `Try PureFlash` in README


## Build step by step:
PureFlash can be build with cmake tools.

1. Build on Linux
=================
0a) Prerequisite to build on Ubuntu-22.04
    # apt install cgdb curl gzip jq libaio1 libcurl4   libibverbs1 libicu-dev libjsoncpp25 librdmacm1 readline-common libstdc++6 libtool  libuuid1 tar unzip  util-linux vim wget  net-tools  ninja-build libcurl4-openssl-dev libcppunit-dev uuid-dev libaio-dev nasm autoconf cmake librdmacm-dev pkg-config g++ default-jdk ant meson libssl-dev ncurses-dev libnuma-dev help2man
	# pip install pyelftools
	
0b) Prerequisite to build on CentOS 7
  - ninja
    # wget http://repo.okay.com.mx/centos/7/x86_64/release//ninja-build-1.8.2-1.el7.x86_64.rpm
    # rpm -i ninja-build-1.8.2-1.el7.x86_64.rpm
  
  - ant
   ant is used to compile zookeeper lib
   # wget https://mirror.bit.edu.cn/apache//ant/binaries/apache-ant-1.9.15-bin.tar.bz2
   # tar xjf apache-ant-1.9.15-bin.tar.bz2 && sudo ln -s `pwd`/apache-ant-1.9.15/bin/ant /usr/local/bin/ant

  - java
    install java correctly, sicne maven and jconductor need it
    # wget https://download.java.net/java/GA/jdk14.0.1/664493ef4a6946b186ff29eb326336a2/7/GPL/openjdk-14.0.1_linux-x64_bin.tar.gz
    # cd /opt && sudo tar xzf openjdk-14.0.1_linux-x64_bin.tar.gz
    # export JAVA_HOME=/opt/jdk-14.0.1
    # export PATH=$PATH:$JAVA_HOME/bin
  - Ohters
    # yum install -y  libuuid libuuid-devel gperftools-devel ant cppunit-devel
    # wget https://github.com/Kitware/CMake/releases/download/v3.15.4/cmake-3.15.4.tar.gz
    # tar xzf cmake-3.15.4.tar.gz
    # cd cmake-3.15.4
    # ./bootstrap && make && sudo make install
    -  libtool
      # yum install libtool # for centos


  


1) check out code
  # git clone https://github.com/cocalele/PureFlash.git
  # set PFHOME=$(pwd)/PureFlash
  # git submodule update --init --recursive

2) build zookeeper
  # cd thirdParty/zookeeper
  # ant compile_jute
  # cd zookeeper-client/zookeeper-client-c
  # autoreconf -if
  # ./configure --enable-debug --without-cppunit
  # make

3) run cmake to generate ninja scripts
  # cd PureFlash;
  # export PUREFLASH_HOME=`pwd`
  # mkdir build_deb; cd build_deb
  # cmake -GNinja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_MAKE_PROGRAM=/usr/local/bin/ninja ..

The above command will generate scripts for Debug build. To do a release build, run command:
  # cmake -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_MAKE_PROGRAM=/usr/local/bin/ninja ..

4) run ninja to do build
  $ ninja

after build finish, all binary should be found under  * bin * dir

5) checkout and build jconductor
  # git clone https://github.com/cocalele/jconductor.git
  # cd jconductor
  # git submodule update --init
  # ant  -f jconductor.xml

2. Run
=================

## 2.1 Setup a loopback device for debug environment

    # truncate  -s 50G /opt/pureflash/data0.img
	the file size should great than 40GB, for the meta data will use 40GB.
	
    # losetup /dev/loop0 /opt/pureflash/data0.img
	
	Note, the loopback device is only for testing/debug purpose. You can use physical SSD if you have one.
	
## 2.2 Start zookeeper
    # wget https://downloads.apache.org/zookeeper/zookeeper-3.5.9/apache-zookeeper-3.5.9-bin.tar.gz
    # $ZOOBINDIR/zkServer.sh start

## 2.3 install mariadb

   Jconductor need MariaDB version higher than 10.4. You can download and install appropriate version from https://mariadb.com/downloads/;
   Then run commands:
```
    sudo systemctl start mysql
    sudo mysql -e "GRANT ALL PRIVILEGES ON *.* TO 'pureflash'@'%' IDENTIFIED BY '123456'"
    sudo mysql -e "source jconductor/res/init_s5metadb.sql"  #replace `jconductor` with the right dir
```

1) Config file
   Please reference `pfs/pfs_template.conf` and `jconductor/pfc_template.conf` to prepare config file for pfs and pfc(jconductor).
   by default, pfs and jconductor will lookup config file under directory /etc/pureflash/{pfc.conf, pfs.conf}


2) Start pureflash store
   ```
   # source build_deb/env.sh  # supporse you have do a build under directory build_deb
   # pfs
   ```
3) Start jconductor
   ```
   # source jconductor/env-pfc.sh
   # pfc
   ```
   
3. Run testcase
===================
   There are some testcase under pfs/testing directory. it can be run like bellow:
   ```
   # source build_deb/env.sh
   # source jconductor/env-pfc.sh
   # test_1.sh
   ```
4. Run fio
=============
## 1) build fio
```
   # git clone https://gitee.com/cocalele/fio.git
   # cd fio
   # ./configure --pfbd-include=${PUREFLASH_HOME}/common/include --pfbd-lib==${PUREFLASH_HOME}/build_deb/bin/
   # make
```
if compiling with s5common support SPDK engine, you shoule specify spdk/dpdk lib with blow parameters:
```
   # ./configure --pfbd-include=${PUREFLASH_HOME}/common/include --pfbd-lib==${PUREFLASH_HOME}/build_deb/bin/ --spdk-lib=${PUREFLASH_HOME}/thirdParty/dpdk/build/lib --dpdk-lib=${PUREFLASH_HOME}/thirdParty/spdk/dpdk/build/lib
```
## 2ï¼‰ run fio
```
   # pfcli create_volume -v test_v1 -s 2G
   # fio -name=test -ioengine=pfbd -volume=test_v1 -iodepth=2  -rw=randwrite -size=2G -bs=4k -direct=1
```

5. Run Qemu
==================
## 1) build qemu with pfbd
```
   # apt install -y  libglib2.0-dev libpixman-1-dev python3 git python3-pip libslirp-dev
   # apt install -y  libfdt-dev  #need on ARM
   # git clone  https://gitee.com/cocalele/qemu.git
   # cd qemu
   # git submodule update --init
   # #git checkout pfbd
   # mkdir /usr/include/pfbd
   # cp ${PUREFLASH_HOME}/common/include/pf_client_api.h /usr/include/pfbd/pf_client_api.h
   # cp ${PUREFLASH_HOME}/build_deb/bin/libs5common.a /usr/lib/libs5common.a
   # cp ${PUREFLASH_HOME}/build_deb/bin/libzookeeper_mt.a /usr/lib/libzookeeper_mt.a
   # cp ${PUREFLASH_HOME}/build_deb/bin/libhashtable.a /usr/lib/libhashtable.a
   # ( cd ${PUREFLASH_HOME}/build_deb/bin;  cp -rp libspdk* /usr/lib/)
   # ( cd ${PUREFLASH_HOME}/build_deb/bin; cp -rp librte* /usr/lib/)
   # ( cd ${PUREFLASH_HOME}/build_deb/bin; cp -rp dpdk /usr/lib/)
   
   # mkdir build; cd build; ../configure  --enable-debug --enable-kvm  --target-list=x86_64-softmmu  --disable-linux-io-uring && ninja
   
   for arm:
   # ../configure --disable-linux-io-uring --enable-kvm  --target-list=aarch64-linux-user,aarch64-softmmu
  
```
## 2) run qemu-img 
```

   # qemu/build/qemu-img dd bs=4k count=1  if=pfbd:test_v1 of=./test.dat 
```

6. build  tcmu
   tcmu is a LIO module to export pfbd volume via iSCSI. You need this only if you want.
   1) git clone https://gitee.com/cocalele/tcmu-runner.git
   2) apt install libkmod-dev libkmod2 libnl-3-dev libnl-genl-3-dev
   3) mkdir build && cd build && cmake .. -GNinja && ninja
  

7. use nbd (not recommended)
   # apt install autoconf-archive bison flex git libglib2.0-dev
   # git clone  https://gitee.com/cocalele/pfs-nbd.git
   # cd pfs-nbd
   # autoreconf -f -i
   # ./configure --enable-pfsnbd
   # modprobe nbd 
   # pfsnbd  /dev/nbd3 test_v1  

